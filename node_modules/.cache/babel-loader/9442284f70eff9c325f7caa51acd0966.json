{"ast":null,"code":"var _jsxFileName = \"F:\\\\unit5\\\\assignments\\\\c4\\\\exam\\\\src\\\\components\\\\NewOrder.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NewOrder = () => {\n  _s();\n\n  // Get data of only this user. store it in redux\n  // GET /orders?owner_name=john will give you all order of user john\n  //  on submit click create a new order, new order has status `Not Accepted`\n  const [data, setData] = useState([]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"new-problem\",\n        type: \"text\",\n        name: \"problem\",\n        placeholder: \"Enter problem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"owner-name\",\n        type: \"text\",\n        name: \"owner_name\",\n        placeholder: \"yourname\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"brand\",\n        type: \"text\",\n        name: \"brand\",\n        placeholder: \"Enter brand name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit\",\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pastOrders\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), data.map(e => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"past-orders\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"id\",\n            children: e.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 22\n          }, this), \".\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"problem\",\n            children: e.problem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 22\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"status\",\n            children: [\"Status: \", e.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 19\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this);\n};\n\n_s(NewOrder, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n\n_c = NewOrder;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewOrder\");","map":{"version":3,"names":["useState","NewOrder","data","setData","map","e","id","problem","status"],"sources":["F:/unit5/assignments/c4/exam/src/components/NewOrder.jsx"],"sourcesContent":["import { useState } from \"react\";\n\nexport const NewOrder = () => {\n   // Get data of only this user. store it in redux\n   // GET /orders?owner_name=john will give you all order of user john\n   //  on submit click create a new order, new order has status `Not Accepted`\n\n   const [data, setData] = useState([]);\n\n   return (\n      <div>\n         <div className=\"form\">\n            <input\n               className=\"new-problem\"\n               type=\"text\"\n               name=\"problem\"\n               placeholder=\"Enter problem\"\n            />\n            {/* This input is readonly, it's coming from redux */}\n            <input\n               className=\"owner-name\"\n               type=\"text\"\n               name=\"owner_name\"\n               placeholder=\"yourname\"\n               readOnly\n            />\n            <input\n               className=\"brand\"\n               type=\"text\"\n               name=\"brand\"\n               placeholder=\"Enter brand name\"\n            />\n            {/* Create new problem, show it in below form immediately */}\n            <button className=\"submit\">submit</button>\n         </div>\n\n         <div className=\"pastOrders\">\n            {/* this button filters the data below. */}\n            {/* it's just a toggle of redux state something like `showUnfinished`  */}\n            <button className=\"filter\">\n               {/* Text should change like:   Show {showUnfinished ? \"all\" : \"Only unfinished\"} */}\n            </button>\n\n            {/* Here create a div for every oreder, filter them before based on `showUnfinished` */}\n            {data.map((e) => {\n               return (\n                  <div className=\"past-orders\">\n                     <span className=\"id\">{e.id}</span>.{\" \"}\n                     <span className=\"problem\">{e.problem}</span>{\" \"}\n                     <span className=\"cost\">\n                        {/* if status is not accepted then keep it empty otherwise show cost like $1234 */}\n                     </span>\n                     <p className=\"status\">Status: {e.status}</p>\n                     <hr />\n                  </div>\n               );\n            })}\n         </div>\n      </div>\n   );\n};"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EAC3B;EACA;EACA;EAEA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,EAAD,CAAhC;EAEA,oBACG;IAAA,wBACG;MAAK,SAAS,EAAC,MAAf;MAAA,wBACG;QACG,SAAS,EAAC,aADb;QAEG,IAAI,EAAC,MAFR;QAGG,IAAI,EAAC,SAHR;QAIG,WAAW,EAAC;MAJf;QAAA;QAAA;QAAA;MAAA,QADH,eAQG;QACG,SAAS,EAAC,YADb;QAEG,IAAI,EAAC,MAFR;QAGG,IAAI,EAAC,YAHR;QAIG,WAAW,EAAC,UAJf;QAKG,QAAQ;MALX;QAAA;QAAA;QAAA;MAAA,QARH,eAeG;QACG,SAAS,EAAC,OADb;QAEG,IAAI,EAAC,MAFR;QAGG,IAAI,EAAC,OAHR;QAIG,WAAW,EAAC;MAJf;QAAA;QAAA;QAAA;MAAA,QAfH,eAsBG;QAAQ,SAAS,EAAC,QAAlB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAtBH;IAAA;MAAA;MAAA;MAAA;IAAA,QADH,eA0BG;MAAK,SAAS,EAAC,YAAf;MAAA,wBAGG;QAAQ,SAAS,EAAC;MAAlB;QAAA;QAAA;QAAA;MAAA,QAHH,EAQIE,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAO;QACd,oBACG;UAAK,SAAS,EAAC,aAAf;UAAA,wBACG;YAAM,SAAS,EAAC,IAAhB;YAAA,UAAsBA,CAAC,CAACC;UAAxB;YAAA;YAAA;YAAA;UAAA,QADH,OACuC,GADvC,eAEG;YAAM,SAAS,EAAC,SAAhB;YAAA,UAA2BD,CAAC,CAACE;UAA7B;YAAA;YAAA;YAAA;UAAA,QAFH,EAEgD,GAFhD,eAGG;YAAM,SAAS,EAAC;UAAhB;YAAA;YAAA;YAAA;UAAA,QAHH,eAMG;YAAG,SAAS,EAAC,QAAb;YAAA,uBAA+BF,CAAC,CAACG,MAAjC;UAAA;YAAA;YAAA;YAAA;UAAA,QANH,eAOG;YAAA;YAAA;YAAA;UAAA,QAPH;QAAA;UAAA;UAAA;UAAA;QAAA,QADH;MAWF,CAZA,CARJ;IAAA;MAAA;MAAA;MAAA;IAAA,QA1BH;EAAA;IAAA;IAAA;IAAA;EAAA,QADH;AAmDF,CA1DM;;GAAMP,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}